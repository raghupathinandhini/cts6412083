-- Create CUSTOMERS table

CREATE TABLE CUSTOMERS (
  CustomerID NUMBER PRIMARY KEY,
  Name VARCHAR2(50),
  Age NUMBER,
  Balance NUMBER,
  IsVIP VARCHAR2(5)
);

-- Insert sample customers
INSERT INTO CUSTOMERS VALUES (1, 'Alice', 65, 12000, 'FALSE');
INSERT INTO CUSTOMERS VALUES (2, 'Bob', 45, 8000, 'FALSE');
INSERT INTO CUSTOMERS VALUES (3, 'Charlie', 70, 5000, 'FALSE');
INSERT INTO CUSTOMERS VALUES (4, 'Diana', 35, 15000, 'FALSE');


-- Create LOANS table

CREATE TABLE LOANS (
  LoanID NUMBER PRIMARY KEY,
  CustomerID NUMBER REFERENCES CUSTOMERS(CustomerID),
  InterestRate NUMBER,
  DueDate DATE
);

-- Insert sample loans
INSERT INTO LOANS VALUES (101, 1, 0.07, SYSDATE + 20);
INSERT INTO LOANS VALUES (102, 2, 0.08, SYSDATE + 45);
INSERT INTO LOANS VALUES (103, 3, 0.09, SYSDATE + 10);
INSERT INTO LOANS VALUES (104, 4, 0.07, SYSDATE + 5);

-- Create SAVINGS_ACCOUNTS table

CREATE TABLE SAVINGS_ACCOUNTS (
  AccountID NUMBER PRIMARY KEY,
  CustomerID NUMBER REFERENCES CUSTOMERS(CustomerID),
  Balance NUMBER
);

-- Insert sample savings accounts
INSERT INTO SAVINGS_ACCOUNTS VALUES (201, 1, 5000);
INSERT INTO SAVINGS_ACCOUNTS VALUES (202, 2, 8000);
INSERT INTO SAVINGS_ACCOUNTS VALUES (203, 3, 3000);
INSERT INTO SAVINGS_ACCOUNTS VALUES (204, 4, 15000);


-- Create EMPLOYEES table

CREATE TABLE EMPLOYEES (
  EmployeeID NUMBER PRIMARY KEY,
  Name VARCHAR2(50),
  DepartmentID NUMBER,
  Salary NUMBER
);

-- Insert sample employees
INSERT INTO EMPLOYEES VALUES (301, 'Eve', 10, 4000);
INSERT INTO EMPLOYEES VALUES (302, 'Frank', 20, 5000);
INSERT INTO EMPLOYEES VALUES (303, 'Grace', 10, 6000);

-- Create Accounts table

CREATE TABLE ACCOUNTS (
  AccountID NUMBER PRIMARY KEY,
  CustomerID NUMBER REFERENCES CUSTOMERS(CustomerID),
  Balance NUMBER
);

-- Insert sample accounts
INSERT INTO ACCOUNTS VALUES (401, 1, 10000);
INSERT INTO ACCOUNTS VALUES (402, 1, 5000);
INSERT INTO ACCOUNTS VALUES (403, 2, 2000);

--code:
-- Scenario 3: Transfer Funds between accounts
CREATE OR REPLACE PROCEDURE TransferFunds (
  p_SourceAccountID IN NUMBER,
  p_DestinationAccountID IN NUMBER,
  p_Amount IN NUMBER
) IS
  v_SourceBalance NUMBER;
BEGIN
  -- Check source account balance
  SELECT Balance INTO v_SourceBalance
  FROM ACCOUNTS
  WHERE AccountID = p_SourceAccountID;

  IF v_SourceBalance < p_Amount THEN
    RAISE_APPLICATION_ERROR(-20001, 'Insufficient balance in source account.');
  ELSE
    -- Deduct from source
    UPDATE ACCOUNTS
    SET Balance = Balance - p_Amount
    WHERE AccountID = p_SourceAccountID;

    -- Add to destination
    UPDATE ACCOUNTS
    SET Balance = Balance + p_Amount
    WHERE AccountID = p_DestinationAccountID;

    COMMIT;
  END IF;
END;
/
